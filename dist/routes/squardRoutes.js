"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const userModel_1 = __importDefault(require("../models/userModel"));
const approvalModel_1 = __importDefault(require("../models/approvalModel"));
const eventModel_1 = __importDefault(require("../models/eventModel"));
const authenticateUserMiddleware_1 = __importDefault(require("../Middleware/authenticateUserMiddleware"));
const router = (0, express_1.Router)();
const user = new userModel_1.default();
const approval = new approvalModel_1.default();
const event = new eventModel_1.default();
const authenticate = new authenticateUserMiddleware_1.default();
router.get("/profile", authenticate.verifyToken, authenticate.isSquad, user.getUserProfileByRoleAndId);
router.get("/users/active", authenticate.verifyToken, authenticate.isSquad, user.getAllActiveUsers);
router.get("/users/pending", authenticate.verifyToken, authenticate.isSquad, user.getAllPendingUsers);
router.get("/users/rejected", authenticate.verifyToken, authenticate.isSquad, user.getAllRejectedUsers);
router.get("/organizers/active", authenticate.verifyToken, authenticate.isSquad, user.getAllActiveOrganizers);
router.get("/organizers/pending", authenticate.verifyToken, authenticate.isSquad, user.getAllPendingOrganizers);
router.get("/organizers/rejected", authenticate.verifyToken, authenticate.isSquad, user.getAllRejectedOrganizers);
router.get("/events/active", authenticate.verifyToken, authenticate.isSquad, event.getAllActiveEvents);
router.get("/events/pending", authenticate.verifyToken, authenticate.isSquad, event.getAllPendingEvents);
router.get("/events/rejected", authenticate.verifyToken, authenticate.isSquad, event.getAllRejectedEvents);
router.get("/events/completed", authenticate.verifyToken, authenticate.isSquad, event.getAllCompletedEvents);
router.post("/user/approve", authenticate.verifyToken, authenticate.isSquad, approval.approveUser);
router.post("/user/reject", authenticate.verifyToken, authenticate.isSquad, approval.rejectUser);
router.post("/organizer/approve", authenticate.verifyToken, authenticate.isSquad, approval.approveOrganizer);
router.post("/organizer/reject", authenticate.verifyToken, authenticate.isSquad, approval.rejectOrganizer);
router.post("/event/approve-reject", authenticate.verifyToken, authenticate.isSquad, approval.approveOrRejectEvent);
exports.default = router;
